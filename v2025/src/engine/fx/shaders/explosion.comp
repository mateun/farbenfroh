

void reset(inout Particle p, uint idx) {
    // Start at emitter position, with a small optional jitter offset
    float jitter = random(idx) * 0.1; // tweak this for a small offset
    float angle = random(idx + 30) * 6.2831;
    vec3 offset = vec3(jitter * cos(angle), jitter * sin(angle), 0.0);
    p.position.xyz = p.emitterPosition.xyz + offset;

    // Generate a random direction in all axes
    vec3 randomVec = vec3(
    random(idx + 100) * 2.0 - 1.0,
    random(idx + 134) * 2.0 - 1.0,
    random(idx + 1200) * 2.0 - 1.0);

    vec3 direction = normalize(randomVec);

    // Set a high explosion speed (tweak these values as needed)
    float speed = 5.0 + random(idx + 20) * 5.0;  // speed between 20 and 50 units
    p.velocity.xyz = direction * speed;

    // Short explosion lifetime (e.g., between 1 and 2 seconds)
    p.lifetime = 1 + random(idx + 30) * 1.2;


}


void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= particles.length()) return;

    Particle p = particles[idx];

    float gravity = 9.8;
    p.velocity.y -= gravity * deltaTime;

    p.position.xyz += p.velocity.xyz * deltaTime * .9;

    p.lifetime -= deltaTime * 0.99;            // faster decay
    if (p.lifetime <= 0.0) {
            reset(p, idx);
    }



    // Write modified particle back into SSBO
    particles[idx] = p;
}
