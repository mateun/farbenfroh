//#version 450 core
//
//// Define local workgroup size (adjust as needed; 256 is a common choice)
//layout(local_size_x = 256) in;
//
//// Particle struct matching your CPU-side definition (std430 alignment!)
//struct Particle {
//    vec4 position;  // xyz = position, w = unused or lifetime if you prefer
//    vec4 velocity;  // xyz = velocity, w = unused
//    vec4 emitterPosition; // base emitter position
//    float lifetime; // remaining particle lifetime
//    int type;       // 0 = smoke, 1 = explosion, etc.
//    vec2 padding;   // ensures 16-byte alignment (total size = 48 bytes)
//};
//
//// SSBO binding to store particles on GPU (matches CPU buffer binding point)
//layout(std430, binding = 0) buffer Particles {
//    Particle particles[];
//};
//
//// Uniforms for particle logic
//uniform float deltaTime;
//
//// Random number function (simple hash-based)
//float random(float seed) {
//    return fract(sin(seed) * 43758.5453123);
//}

void resetSmokeParticle(inout Particle p, uint idx) {
    // Random horizontal offset around the emitter position
    float radius = random(idx) * 0.5;  // random radius (adjustable)
    float angle = random(idx + 1) * 6.2831; // random angle (0–2π)

    float x_offset = radius * cos(angle);
    float z_offset = radius * sin(angle);

    // Start at randomized emitter position
    p.position.xyz = p.emitterPosition.xyz + vec3(x_offset, 0.0, z_offset);

    // Slight random upward velocity
    float velocityAngle = random(idx + 2) * 6.2831; // random direction
    float speed = 0.2 + random(idx + 3) * 0.3;
    p.velocity.xyz = vec3(cos(velocityAngle)*0.1, speed, sin(velocityAngle)*0.1);

    p.lifetime = 0.1 + random(idx + 4) * 5.0; // 5–7 sec lifetime
    p.type = 0; // smoke
}


void main() {
    uint idx = gl_GlobalInvocationID.x;

    // Safety check (optional, but recommended)
    if (idx >= particles.length()) return;

    Particle p = particles[idx];

    switch (p.type) {
        case 0:  // Smoke particle behavior
        p.velocity.y += 0.5 * deltaTime;          // gently accelerate upwards more noticeably
        p.velocity.xz *= 0.99;                     // slowly reduce horizontal motion each frame (gentle drift)
        float turbulence = 0.04;
        p.velocity.x += (random(idx + deltaTime) - 0.5) * turbulence * deltaTime;
        p.velocity.z += (random(idx - deltaTime) - 0.5) * turbulence * deltaTime;
        p.position.xyz += p.velocity.xyz * deltaTime;
        p.lifetime -= deltaTime * 0.8;             // particles live longer (slower decay)
        if (p.lifetime <= 0.0) {
            resetSmokeParticle(p, idx);
        }
        break;

        case 1:  // Explosion particle behavior
        p.velocity.xyz *= 0.98;                   // gradually slow down
        p.position.xyz += p.velocity.xyz * deltaTime;
        p.lifetime -= deltaTime * 0.5;            // faster decay
        break;

        default: // Optional default case
        p.lifetime -= deltaTime;
        break;
    }

    // Write modified particle back into SSBO
    particles[idx] = p;
}
